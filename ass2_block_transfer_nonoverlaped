


section .data
nline db 10,10  ;here we have created array of two newline characters
nline_len equ $-nline ;nline_len is size of nline calculated using $
space db " "  ;space is single space character 

;---------------------------------------------------

ano  db 10, "Assignment - 2-A", ;ano has all lines of string explaing about Assignment
     db 10, "---------------------------------------------------"
     db 10, " Block Transfer Non overlaped"
     db 10 "---------------------------------------------------"

ano_len   equ  $-ano  ;it calculates the length of this block of data

;----------------------------------------------------

bmsg      db 10, "Before Transfer" 
bmsg_len  equ  $-bmsg  

amsg         db 10, "After Transfer : "
amsg_len     equ  $-amsg

smsg          db  10, "Source Block          : "
smsg          equ $-smsg

dmsg          db 10, " Destination Block    :"  ;status message
dmsg_len      equ $-dmsg    ;lenghts stored 

sblock        db 11h,22h,33h,44h,55h   ;source block which has hexadecimals values
dblock        times 5 db 0    ; it is destination block initialized to five zeroes

char_ans resB 2     ; it reserves 2 bytes in memory

;----------------------------------------------------

%macro	Print	2
	MOV	RAX,1       ;Rax = 1 it sets the system call number for write
	MOV	RDI,1       
	MOV	RSI,%1      ;memory address and length of the data to print
	MOV	RDX,%2      ;memory address and length of the data to print
	syscall
%endmacro

%macro	Read	2     ;This macro reads input from the terminal using the read system call (number 0).
	MOV	RAX,0
	MOV	RDI,0
	MOV	RSI,%1
	MOV	RDX,%2
	syscall
%endmacro

%macro Exit 0
	Print	nline,nline_len
	MOV	RAX,60      ;system call number for exit
	MOV	RDI,0       ;specifies an exit status of 0 
	syscall
%endmacro

;----------------------------------------------------

data .text
_start:
	Print	ano,ano_len
  Print	bmsg,bmsg_len
  
	Print 	smsg,smsg_len
	mov	rsi,sblock
	call	disp_block
	
		Print	dmsg,dmsg_len
	mov	rsi,dblock
	call	disp_block

	call	BT_NO     ;call the bt-no function to perform actual transfer from sblock to dblock
	
	Print	amsg,amsg_len   ;After the transfer, it prints "After Transfer::", then shows the source and destination blocks again
	Print 	smsg,smsg_len
	mov	rsi,sblock
	call	disp_block
	Print	dmsg,dmsg_len
	mov	rsi,dblock
	call	disp_block

Exit


;----------------------------------------------------

BT_NO:   ; trasnfers data from sblock to dblock
	mov	rsi,sblock      ;rsi points to the source(sblock) 
	mov	rdi,dblock      ;rdi to the destination block (dblock)
	mov	rcx,5           ;rcx is the loop counter set to 5(lenght of block)

back:
	mov	al,[rsi]        ;the byte pointed by rsi is copied to rdi
	mov	[rdi],al
	inc	rsi             ;now both pointers are incremented and rcx is decremented
	inc	rdi
	dec	rcx
	jnz	back            ;loop cointinues untill rcx reached zero
RET

disp_block:           ;This function displays each byte in the block in hexadecimal forma
	mov	rbp,5

next_num:
	mov	al,[rsi]          ;It reads each byte from rsi
	push	rsi             ;pushes rsi
	call	Disp_8
	Print	space,1
	pop	rsi              
	inc	rsi
	dec	rbp               ;After printing, it pops rsi back and increments it to point to the next byte, repeating this process 5 times (since rbp is set to 5).
	jnz	next_num
RET

Disp_8:
	MOV	RSI,char_ans+1
	MOV	RCX,2
	MOV	RBX,16

next_digit:
	XOR	RDX,RDX
	DIV	RBX
	CMP	DL,9
	JBE	add30
	ADD	DL,07H

add30:
	ADD	DL,30H
	MOV	[RSI],DL
	DEC	RSI
	DEC	RCX
	JNZ	next_digit
	Print	char_ans,2
ret


